
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model books
 */

export type books = {
  id: number
  title: string | null
  creator: string | null
  publisher: string | null
  id_category: number | null
  isbn: string | null
  pages: string | null
  cover: string | null
  id_user: number | null
  descriptions: string | null
}

/**
 * Model users
 */

export type users = {
  id: number
  name: string | null
  username: string | null
  email: string | null
  password: string | null
}

/**
 * Model category
 */

export type category = {
  id: number
  name_category: string | null
  icon: string | null
}

/**
 * Model borrowing
 */

export type borrowing = {
  id: number
  borrower_name: string
  book_id: number | null
  user_id: number | null
  start_date: Date | null
  end_date: Date | null
  status: string | null
}

/**
 * Model discuss
 */

export type discuss = {
  id: number
  book_id: number | null
  user_id: number | null
  discuss: string | null
}

/**
 * Model rating
 */

export type rating = {
  id: number
  rating: number | null
  book_id: number | null
}

/**
 * Model user_detail
 */

export type user_detail = {
  id: number
  user_id: number | null
  ktp: string | null
  alamat: string | null
  jenis_kelamin: string | null
  usia: number | null
  ttl: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Books
 * const books = await prisma.books.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Books
   * const books = await prisma.books.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.books`: Exposes CRUD operations for the **books** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.books.findMany()
    * ```
    */
  get books(): Prisma.booksDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<GlobalReject>;

  /**
   * `prisma.borrowing`: Exposes CRUD operations for the **borrowing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Borrowings
    * const borrowings = await prisma.borrowing.findMany()
    * ```
    */
  get borrowing(): Prisma.borrowingDelegate<GlobalReject>;

  /**
   * `prisma.discuss`: Exposes CRUD operations for the **discuss** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discusses
    * const discusses = await prisma.discuss.findMany()
    * ```
    */
  get discuss(): Prisma.discussDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.ratingDelegate<GlobalReject>;

  /**
   * `prisma.user_detail`: Exposes CRUD operations for the **user_detail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_details
    * const user_details = await prisma.user_detail.findMany()
    * ```
    */
  get user_detail(): Prisma.user_detailDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    books: 'books',
    users: 'users',
    category: 'category',
    borrowing: 'borrowing',
    discuss: 'discuss',
    rating: 'rating',
    user_detail: 'user_detail'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model books
   */


  export type AggregateBooks = {
    count: BooksCountAggregateOutputType | null
    avg: BooksAvgAggregateOutputType | null
    sum: BooksSumAggregateOutputType | null
    min: BooksMinAggregateOutputType | null
    max: BooksMaxAggregateOutputType | null
  }

  export type BooksAvgAggregateOutputType = {
    id: number
    id_category: number | null
    id_user: number | null
  }

  export type BooksSumAggregateOutputType = {
    id: number
    id_category: number | null
    id_user: number | null
  }

  export type BooksMinAggregateOutputType = {
    id: number
    title: string | null
    creator: string | null
    publisher: string | null
    id_category: number | null
    isbn: string | null
    pages: string | null
    cover: string | null
    id_user: number | null
    descriptions: string | null
  }

  export type BooksMaxAggregateOutputType = {
    id: number
    title: string | null
    creator: string | null
    publisher: string | null
    id_category: number | null
    isbn: string | null
    pages: string | null
    cover: string | null
    id_user: number | null
    descriptions: string | null
  }

  export type BooksCountAggregateOutputType = {
    id: number
    title: number | null
    creator: number | null
    publisher: number | null
    id_category: number | null
    isbn: number | null
    pages: number | null
    cover: number | null
    id_user: number | null
    descriptions: number | null
    _all: number
  }


  export type BooksAvgAggregateInputType = {
    id?: true
    id_category?: true
    id_user?: true
  }

  export type BooksSumAggregateInputType = {
    id?: true
    id_category?: true
    id_user?: true
  }

  export type BooksMinAggregateInputType = {
    id?: true
    title?: true
    creator?: true
    publisher?: true
    id_category?: true
    isbn?: true
    pages?: true
    cover?: true
    id_user?: true
    descriptions?: true
  }

  export type BooksMaxAggregateInputType = {
    id?: true
    title?: true
    creator?: true
    publisher?: true
    id_category?: true
    isbn?: true
    pages?: true
    cover?: true
    id_user?: true
    descriptions?: true
  }

  export type BooksCountAggregateInputType = {
    id?: true
    title?: true
    creator?: true
    publisher?: true
    id_category?: true
    isbn?: true
    pages?: true
    cover?: true
    id_user?: true
    descriptions?: true
    _all?: true
  }

  export type BooksAggregateArgs = {
    /**
     * Filter which books to aggregate.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned books
    **/
    count?: true | BooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BooksMaxAggregateInputType
  }

  export type GetBooksAggregateType<T extends BooksAggregateArgs> = {
    [P in keyof T & keyof AggregateBooks]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooks[P]>
      : GetScalarType<T[P], AggregateBooks[P]>
  }



  export type booksSelect = {
    id?: boolean
    title?: boolean
    creator?: boolean
    publisher?: boolean
    id_category?: boolean
    isbn?: boolean
    pages?: boolean
    cover?: boolean
    id_user?: boolean
    descriptions?: boolean
    category?: boolean | categoryArgs
    users?: boolean | usersArgs
    borrowing?: boolean | borrowingFindManyArgs
    discuss?: boolean | discussFindManyArgs
    rating?: boolean | ratingFindManyArgs
  }

  export type booksInclude = {
    category?: boolean | categoryArgs
    users?: boolean | usersArgs
    borrowing?: boolean | borrowingFindManyArgs
    discuss?: boolean | discussFindManyArgs
    rating?: boolean | ratingFindManyArgs
  }

  export type booksGetPayload<
    S extends boolean | null | undefined | booksArgs,
    U = keyof S
      > = S extends true
        ? books
    : S extends undefined
    ? never
    : S extends booksArgs | booksFindManyArgs
    ?'include' extends U
    ? books  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'category'
        ? categoryGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> | null :
        P extends 'borrowing'
        ? Array < borrowingGetPayload<S['include'][P]>>  :
        P extends 'discuss'
        ? Array < discussGetPayload<S['include'][P]>>  :
        P extends 'rating'
        ? Array < ratingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof books ?books [P]
  : 
          P extends 'category'
        ? categoryGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> | null :
        P extends 'borrowing'
        ? Array < borrowingGetPayload<S['select'][P]>>  :
        P extends 'discuss'
        ? Array < discussGetPayload<S['select'][P]>>  :
        P extends 'rating'
        ? Array < ratingGetPayload<S['select'][P]>>  : never
  } 
    : books
  : books


  type booksCountArgs = Merge<
    Omit<booksFindManyArgs, 'select' | 'include'> & {
      select?: BooksCountAggregateInputType | true
    }
  >

  export interface booksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Books that matches the filter.
     * @param {booksFindUniqueArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends booksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, booksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'books'> extends True ? CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>> : CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>

    /**
     * Find the first Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends booksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, booksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'books'> extends True ? CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>> : CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.books.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.books.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const booksWithIdOnly = await prisma.books.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends booksFindManyArgs>(
      args?: SelectSubset<T, booksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>

    /**
     * Create a Books.
     * @param {booksCreateArgs} args - Arguments to create a Books.
     * @example
     * // Create one Books
     * const Books = await prisma.books.create({
     *   data: {
     *     // ... data to create a Books
     *   }
     * })
     * 
    **/
    create<T extends booksCreateArgs>(
      args: SelectSubset<T, booksCreateArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Delete a Books.
     * @param {booksDeleteArgs} args - Arguments to delete one Books.
     * @example
     * // Delete one Books
     * const Books = await prisma.books.delete({
     *   where: {
     *     // ... filter to delete one Books
     *   }
     * })
     * 
    **/
    delete<T extends booksDeleteArgs>(
      args: SelectSubset<T, booksDeleteArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Update one Books.
     * @param {booksUpdateArgs} args - Arguments to update one Books.
     * @example
     * // Update one Books
     * const books = await prisma.books.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends booksUpdateArgs>(
      args: SelectSubset<T, booksUpdateArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Delete zero or more Books.
     * @param {booksDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.books.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends booksDeleteManyArgs>(
      args?: SelectSubset<T, booksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends booksUpdateManyArgs>(
      args: SelectSubset<T, booksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Books.
     * @param {booksUpsertArgs} args - Arguments to update or create a Books.
     * @example
     * // Update or create a Books
     * const books = await prisma.books.upsert({
     *   create: {
     *     // ... data to create a Books
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Books we want to update
     *   }
     * })
    **/
    upsert<T extends booksUpsertArgs>(
      args: SelectSubset<T, booksUpsertArgs>
    ): CheckSelect<T, Prisma__booksClient<books>, Prisma__booksClient<booksGetPayload<T>>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.books.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends booksCountArgs>(
      args?: Subset<T, booksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BooksAggregateArgs>(args: Subset<T, BooksAggregateArgs>): PrismaPromise<GetBooksAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for books.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__booksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends categoryArgs = {}>(args?: Subset<T, categoryArgs>): CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    borrowing<T extends borrowingFindManyArgs = {}>(args?: Subset<T, borrowingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<borrowing>>, PrismaPromise<Array<borrowingGetPayload<T>>>>;

    discuss<T extends discussFindManyArgs = {}>(args?: Subset<T, discussFindManyArgs>): CheckSelect<T, PrismaPromise<Array<discuss>>, PrismaPromise<Array<discussGetPayload<T>>>>;

    rating<T extends ratingFindManyArgs = {}>(args?: Subset<T, ratingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<rating>>, PrismaPromise<Array<ratingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * books findUnique
   */
  export type booksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Throw an Error if a books can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which books to fetch.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books findFirst
   */
  export type booksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Throw an Error if a books can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which books to fetch.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
    **/
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books findMany
   */
  export type booksFindManyArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Filter, which books to fetch.
    **/
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<booksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing books.
    **/
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    distinct?: Enumerable<BooksScalarFieldEnum>
  }


  /**
   * books create
   */
  export type booksCreateArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The data needed to create a books.
    **/
    data: XOR<booksCreateInput, booksUncheckedCreateInput>
  }


  /**
   * books update
   */
  export type booksUpdateArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The data needed to update a books.
    **/
    data: XOR<booksUpdateInput, booksUncheckedUpdateInput>
    /**
     * Choose, which books to update.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books updateMany
   */
  export type booksUpdateManyArgs = {
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyInput>
    where?: booksWhereInput
  }


  /**
   * books upsert
   */
  export type booksUpsertArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * The filter to search for the books to update in case it exists.
    **/
    where: booksWhereUniqueInput
    /**
     * In case the books found by the `where` argument doesn't exist, create a new books with this data.
    **/
    create: XOR<booksCreateInput, booksUncheckedCreateInput>
    /**
     * In case the books was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<booksUpdateInput, booksUncheckedUpdateInput>
  }


  /**
   * books delete
   */
  export type booksDeleteArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
    /**
     * Filter which books to delete.
    **/
    where: booksWhereUniqueInput
  }


  /**
   * books deleteMany
   */
  export type booksDeleteManyArgs = {
    where?: booksWhereInput
  }


  /**
   * books without action
   */
  export type booksArgs = {
    /**
     * Select specific fields to fetch from the books
    **/
    select?: booksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: booksInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number
  }

  export type UsersSumAggregateOutputType = {
    id: number
  }

  export type UsersMinAggregateOutputType = {
    id: number
    name: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number
    name: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number | null
    username: number | null
    email: number | null
    password: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }



  export type usersSelect = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    books?: boolean | booksFindManyArgs
    borrowing?: boolean | borrowingFindManyArgs
    discuss?: boolean | discussFindManyArgs
    user_detail?: boolean | user_detailFindManyArgs
  }

  export type usersInclude = {
    books?: boolean | booksFindManyArgs
    borrowing?: boolean | borrowingFindManyArgs
    discuss?: boolean | discussFindManyArgs
    user_detail?: boolean | user_detailFindManyArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? Array < booksGetPayload<S['include'][P]>>  :
        P extends 'borrowing'
        ? Array < borrowingGetPayload<S['include'][P]>>  :
        P extends 'discuss'
        ? Array < discussGetPayload<S['include'][P]>>  :
        P extends 'user_detail'
        ? Array < user_detailGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'books'
        ? Array < booksGetPayload<S['select'][P]>>  :
        P extends 'borrowing'
        ? Array < borrowingGetPayload<S['select'][P]>>  :
        P extends 'discuss'
        ? Array < discussGetPayload<S['select'][P]>>  :
        P extends 'user_detail'
        ? Array < user_detailGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksFindManyArgs = {}>(args?: Subset<T, booksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>;

    borrowing<T extends borrowingFindManyArgs = {}>(args?: Subset<T, borrowingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<borrowing>>, PrismaPromise<Array<borrowingGetPayload<T>>>>;

    discuss<T extends discussFindManyArgs = {}>(args?: Subset<T, discussFindManyArgs>): CheckSelect<T, PrismaPromise<Array<discuss>>, PrismaPromise<Array<discussGetPayload<T>>>>;

    user_detail<T extends user_detailFindManyArgs = {}>(args?: Subset<T, user_detailFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_detail>>, PrismaPromise<Array<user_detailGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number
  }

  export type CategorySumAggregateOutputType = {
    id: number
  }

  export type CategoryMinAggregateOutputType = {
    id: number
    name_category: string | null
    icon: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number
    name_category: string | null
    icon: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name_category: number | null
    icon: number | null
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name_category?: true
    icon?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name_category?: true
    icon?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name_category?: true
    icon?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which category to aggregate.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }



  export type categorySelect = {
    id?: boolean
    name_category?: boolean
    icon?: boolean
    books?: boolean | booksFindManyArgs
  }

  export type categoryInclude = {
    books?: boolean | booksFindManyArgs
  }

  export type categoryGetPayload<
    S extends boolean | null | undefined | categoryArgs,
    U = keyof S
      > = S extends true
        ? category
    : S extends undefined
    ? never
    : S extends categoryArgs | categoryFindManyArgs
    ?'include' extends U
    ? category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? Array < booksGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof category ?category [P]
  : 
          P extends 'books'
        ? Array < booksGetPayload<S['select'][P]>>  : never
  } 
    : category
  : category


  type categoryCountArgs = Merge<
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface categoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null >, Prisma__categoryClient<categoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs>(
      args?: SelectSubset<T, categoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<category>>, PrismaPromise<Array<categoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs>(
      args: SelectSubset<T, categoryCreateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs>(
      args: SelectSubset<T, categoryDeleteArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs>(
      args: SelectSubset<T, categoryUpdateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs>(
      args?: SelectSubset<T, categoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs>(
      args: SelectSubset<T, categoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs>(
      args: SelectSubset<T, categoryUpsertArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksFindManyArgs = {}>(args?: Subset<T, booksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<books>>, PrismaPromise<Array<booksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Throw an Error if a category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which category to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter, which categories to fetch.
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
    **/
    orderBy?: Enumerable<categoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category create
   */
  export type categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to create a category.
    **/
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category update
   */
  export type categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The data needed to update a category.
    **/
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs = {
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * The filter to search for the category to update in case it exists.
    **/
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
    **/
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
    /**
     * Filter which category to delete.
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs = {
    where?: categoryWhereInput
  }


  /**
   * category without action
   */
  export type categoryArgs = {
    /**
     * Select specific fields to fetch from the category
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoryInclude | null
  }



  /**
   * Model borrowing
   */


  export type AggregateBorrowing = {
    count: BorrowingCountAggregateOutputType | null
    avg: BorrowingAvgAggregateOutputType | null
    sum: BorrowingSumAggregateOutputType | null
    min: BorrowingMinAggregateOutputType | null
    max: BorrowingMaxAggregateOutputType | null
  }

  export type BorrowingAvgAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
  }

  export type BorrowingSumAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
  }

  export type BorrowingMinAggregateOutputType = {
    id: number
    borrower_name: string | null
    book_id: number | null
    user_id: number | null
    start_date: Date | null
    end_date: Date | null
    status: string | null
  }

  export type BorrowingMaxAggregateOutputType = {
    id: number
    borrower_name: string | null
    book_id: number | null
    user_id: number | null
    start_date: Date | null
    end_date: Date | null
    status: string | null
  }

  export type BorrowingCountAggregateOutputType = {
    id: number
    borrower_name: number | null
    book_id: number | null
    user_id: number | null
    start_date: number | null
    end_date: number | null
    status: number | null
    _all: number
  }


  export type BorrowingAvgAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
  }

  export type BorrowingSumAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
  }

  export type BorrowingMinAggregateInputType = {
    id?: true
    borrower_name?: true
    book_id?: true
    user_id?: true
    start_date?: true
    end_date?: true
    status?: true
  }

  export type BorrowingMaxAggregateInputType = {
    id?: true
    borrower_name?: true
    book_id?: true
    user_id?: true
    start_date?: true
    end_date?: true
    status?: true
  }

  export type BorrowingCountAggregateInputType = {
    id?: true
    borrower_name?: true
    book_id?: true
    user_id?: true
    start_date?: true
    end_date?: true
    status?: true
    _all?: true
  }

  export type BorrowingAggregateArgs = {
    /**
     * Filter which borrowing to aggregate.
    **/
    where?: borrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrowings to fetch.
    **/
    orderBy?: Enumerable<borrowingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: borrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrowings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrowings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned borrowings
    **/
    count?: true | BorrowingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BorrowingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BorrowingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BorrowingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BorrowingMaxAggregateInputType
  }

  export type GetBorrowingAggregateType<T extends BorrowingAggregateArgs> = {
    [P in keyof T & keyof AggregateBorrowing]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBorrowing[P]>
      : GetScalarType<T[P], AggregateBorrowing[P]>
  }



  export type borrowingSelect = {
    id?: boolean
    borrower_name?: boolean
    book_id?: boolean
    user_id?: boolean
    start_date?: boolean
    end_date?: boolean
    status?: boolean
    books?: boolean | booksArgs
    users?: boolean | usersArgs
  }

  export type borrowingInclude = {
    books?: boolean | booksArgs
    users?: boolean | usersArgs
  }

  export type borrowingGetPayload<
    S extends boolean | null | undefined | borrowingArgs,
    U = keyof S
      > = S extends true
        ? borrowing
    : S extends undefined
    ? never
    : S extends borrowingArgs | borrowingFindManyArgs
    ?'include' extends U
    ? borrowing  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? booksGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof borrowing ?borrowing [P]
  : 
          P extends 'books'
        ? booksGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> | null : never
  } 
    : borrowing
  : borrowing


  type borrowingCountArgs = Merge<
    Omit<borrowingFindManyArgs, 'select' | 'include'> & {
      select?: BorrowingCountAggregateInputType | true
    }
  >

  export interface borrowingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Borrowing that matches the filter.
     * @param {borrowingFindUniqueArgs} args - Arguments to find a Borrowing
     * @example
     * // Get one Borrowing
     * const borrowing = await prisma.borrowing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends borrowingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, borrowingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'borrowing'> extends True ? CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>> : CheckSelect<T, Prisma__borrowingClient<borrowing | null >, Prisma__borrowingClient<borrowingGetPayload<T> | null >>

    /**
     * Find the first Borrowing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowingFindFirstArgs} args - Arguments to find a Borrowing
     * @example
     * // Get one Borrowing
     * const borrowing = await prisma.borrowing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends borrowingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, borrowingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'borrowing'> extends True ? CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>> : CheckSelect<T, Prisma__borrowingClient<borrowing | null >, Prisma__borrowingClient<borrowingGetPayload<T> | null >>

    /**
     * Find zero or more Borrowings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Borrowings
     * const borrowings = await prisma.borrowing.findMany()
     * 
     * // Get first 10 Borrowings
     * const borrowings = await prisma.borrowing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const borrowingWithIdOnly = await prisma.borrowing.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends borrowingFindManyArgs>(
      args?: SelectSubset<T, borrowingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<borrowing>>, PrismaPromise<Array<borrowingGetPayload<T>>>>

    /**
     * Create a Borrowing.
     * @param {borrowingCreateArgs} args - Arguments to create a Borrowing.
     * @example
     * // Create one Borrowing
     * const Borrowing = await prisma.borrowing.create({
     *   data: {
     *     // ... data to create a Borrowing
     *   }
     * })
     * 
    **/
    create<T extends borrowingCreateArgs>(
      args: SelectSubset<T, borrowingCreateArgs>
    ): CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>>

    /**
     * Delete a Borrowing.
     * @param {borrowingDeleteArgs} args - Arguments to delete one Borrowing.
     * @example
     * // Delete one Borrowing
     * const Borrowing = await prisma.borrowing.delete({
     *   where: {
     *     // ... filter to delete one Borrowing
     *   }
     * })
     * 
    **/
    delete<T extends borrowingDeleteArgs>(
      args: SelectSubset<T, borrowingDeleteArgs>
    ): CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>>

    /**
     * Update one Borrowing.
     * @param {borrowingUpdateArgs} args - Arguments to update one Borrowing.
     * @example
     * // Update one Borrowing
     * const borrowing = await prisma.borrowing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends borrowingUpdateArgs>(
      args: SelectSubset<T, borrowingUpdateArgs>
    ): CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>>

    /**
     * Delete zero or more Borrowings.
     * @param {borrowingDeleteManyArgs} args - Arguments to filter Borrowings to delete.
     * @example
     * // Delete a few Borrowings
     * const { count } = await prisma.borrowing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends borrowingDeleteManyArgs>(
      args?: SelectSubset<T, borrowingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Borrowings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Borrowings
     * const borrowing = await prisma.borrowing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends borrowingUpdateManyArgs>(
      args: SelectSubset<T, borrowingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Borrowing.
     * @param {borrowingUpsertArgs} args - Arguments to update or create a Borrowing.
     * @example
     * // Update or create a Borrowing
     * const borrowing = await prisma.borrowing.upsert({
     *   create: {
     *     // ... data to create a Borrowing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Borrowing we want to update
     *   }
     * })
    **/
    upsert<T extends borrowingUpsertArgs>(
      args: SelectSubset<T, borrowingUpsertArgs>
    ): CheckSelect<T, Prisma__borrowingClient<borrowing>, Prisma__borrowingClient<borrowingGetPayload<T>>>

    /**
     * Count the number of Borrowings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {borrowingCountArgs} args - Arguments to filter Borrowings to count.
     * @example
     * // Count the number of Borrowings
     * const count = await prisma.borrowing.count({
     *   where: {
     *     // ... the filter for the Borrowings we want to count
     *   }
     * })
    **/
    count<T extends borrowingCountArgs>(
      args?: Subset<T, borrowingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BorrowingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Borrowing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BorrowingAggregateArgs>(args: Subset<T, BorrowingAggregateArgs>): PrismaPromise<GetBorrowingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for borrowing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__borrowingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksArgs = {}>(args?: Subset<T, booksArgs>): CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * borrowing findUnique
   */
  export type borrowingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * Throw an Error if a borrowing can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which borrowing to fetch.
    **/
    where: borrowingWhereUniqueInput
  }


  /**
   * borrowing findFirst
   */
  export type borrowingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * Throw an Error if a borrowing can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which borrowing to fetch.
    **/
    where?: borrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrowings to fetch.
    **/
    orderBy?: Enumerable<borrowingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for borrowings.
    **/
    cursor?: borrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrowings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrowings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of borrowings.
    **/
    distinct?: Enumerable<BorrowingScalarFieldEnum>
  }


  /**
   * borrowing findMany
   */
  export type borrowingFindManyArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * Filter, which borrowings to fetch.
    **/
    where?: borrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of borrowings to fetch.
    **/
    orderBy?: Enumerable<borrowingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing borrowings.
    **/
    cursor?: borrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` borrowings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` borrowings.
    **/
    skip?: number
    distinct?: Enumerable<BorrowingScalarFieldEnum>
  }


  /**
   * borrowing create
   */
  export type borrowingCreateArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * The data needed to create a borrowing.
    **/
    data: XOR<borrowingCreateInput, borrowingUncheckedCreateInput>
  }


  /**
   * borrowing update
   */
  export type borrowingUpdateArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * The data needed to update a borrowing.
    **/
    data: XOR<borrowingUpdateInput, borrowingUncheckedUpdateInput>
    /**
     * Choose, which borrowing to update.
    **/
    where: borrowingWhereUniqueInput
  }


  /**
   * borrowing updateMany
   */
  export type borrowingUpdateManyArgs = {
    data: XOR<borrowingUpdateManyMutationInput, borrowingUncheckedUpdateManyInput>
    where?: borrowingWhereInput
  }


  /**
   * borrowing upsert
   */
  export type borrowingUpsertArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * The filter to search for the borrowing to update in case it exists.
    **/
    where: borrowingWhereUniqueInput
    /**
     * In case the borrowing found by the `where` argument doesn't exist, create a new borrowing with this data.
    **/
    create: XOR<borrowingCreateInput, borrowingUncheckedCreateInput>
    /**
     * In case the borrowing was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<borrowingUpdateInput, borrowingUncheckedUpdateInput>
  }


  /**
   * borrowing delete
   */
  export type borrowingDeleteArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
    /**
     * Filter which borrowing to delete.
    **/
    where: borrowingWhereUniqueInput
  }


  /**
   * borrowing deleteMany
   */
  export type borrowingDeleteManyArgs = {
    where?: borrowingWhereInput
  }


  /**
   * borrowing without action
   */
  export type borrowingArgs = {
    /**
     * Select specific fields to fetch from the borrowing
    **/
    select?: borrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: borrowingInclude | null
  }



  /**
   * Model discuss
   */


  export type AggregateDiscuss = {
    count: DiscussCountAggregateOutputType | null
    avg: DiscussAvgAggregateOutputType | null
    sum: DiscussSumAggregateOutputType | null
    min: DiscussMinAggregateOutputType | null
    max: DiscussMaxAggregateOutputType | null
  }

  export type DiscussAvgAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
  }

  export type DiscussSumAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
  }

  export type DiscussMinAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
    discuss: string | null
  }

  export type DiscussMaxAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
    discuss: string | null
  }

  export type DiscussCountAggregateOutputType = {
    id: number
    book_id: number | null
    user_id: number | null
    discuss: number | null
    _all: number
  }


  export type DiscussAvgAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
  }

  export type DiscussSumAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
  }

  export type DiscussMinAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
    discuss?: true
  }

  export type DiscussMaxAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
    discuss?: true
  }

  export type DiscussCountAggregateInputType = {
    id?: true
    book_id?: true
    user_id?: true
    discuss?: true
    _all?: true
  }

  export type DiscussAggregateArgs = {
    /**
     * Filter which discuss to aggregate.
    **/
    where?: discussWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discusses to fetch.
    **/
    orderBy?: Enumerable<discussOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: discussWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discusses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discusses.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discusses
    **/
    count?: true | DiscussCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DiscussAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DiscussSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DiscussMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DiscussMaxAggregateInputType
  }

  export type GetDiscussAggregateType<T extends DiscussAggregateArgs> = {
    [P in keyof T & keyof AggregateDiscuss]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscuss[P]>
      : GetScalarType<T[P], AggregateDiscuss[P]>
  }



  export type discussSelect = {
    id?: boolean
    book_id?: boolean
    user_id?: boolean
    discuss?: boolean
    books?: boolean | booksArgs
    users?: boolean | usersArgs
  }

  export type discussInclude = {
    books?: boolean | booksArgs
    users?: boolean | usersArgs
  }

  export type discussGetPayload<
    S extends boolean | null | undefined | discussArgs,
    U = keyof S
      > = S extends true
        ? discuss
    : S extends undefined
    ? never
    : S extends discussArgs | discussFindManyArgs
    ?'include' extends U
    ? discuss  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? booksGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof discuss ?discuss [P]
  : 
          P extends 'books'
        ? booksGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> | null : never
  } 
    : discuss
  : discuss


  type discussCountArgs = Merge<
    Omit<discussFindManyArgs, 'select' | 'include'> & {
      select?: DiscussCountAggregateInputType | true
    }
  >

  export interface discussDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Discuss that matches the filter.
     * @param {discussFindUniqueArgs} args - Arguments to find a Discuss
     * @example
     * // Get one Discuss
     * const discuss = await prisma.discuss.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends discussFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, discussFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'discuss'> extends True ? CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>> : CheckSelect<T, Prisma__discussClient<discuss | null >, Prisma__discussClient<discussGetPayload<T> | null >>

    /**
     * Find the first Discuss that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussFindFirstArgs} args - Arguments to find a Discuss
     * @example
     * // Get one Discuss
     * const discuss = await prisma.discuss.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends discussFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, discussFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'discuss'> extends True ? CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>> : CheckSelect<T, Prisma__discussClient<discuss | null >, Prisma__discussClient<discussGetPayload<T> | null >>

    /**
     * Find zero or more Discusses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discusses
     * const discusses = await prisma.discuss.findMany()
     * 
     * // Get first 10 Discusses
     * const discusses = await prisma.discuss.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussWithIdOnly = await prisma.discuss.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends discussFindManyArgs>(
      args?: SelectSubset<T, discussFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<discuss>>, PrismaPromise<Array<discussGetPayload<T>>>>

    /**
     * Create a Discuss.
     * @param {discussCreateArgs} args - Arguments to create a Discuss.
     * @example
     * // Create one Discuss
     * const Discuss = await prisma.discuss.create({
     *   data: {
     *     // ... data to create a Discuss
     *   }
     * })
     * 
    **/
    create<T extends discussCreateArgs>(
      args: SelectSubset<T, discussCreateArgs>
    ): CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>>

    /**
     * Delete a Discuss.
     * @param {discussDeleteArgs} args - Arguments to delete one Discuss.
     * @example
     * // Delete one Discuss
     * const Discuss = await prisma.discuss.delete({
     *   where: {
     *     // ... filter to delete one Discuss
     *   }
     * })
     * 
    **/
    delete<T extends discussDeleteArgs>(
      args: SelectSubset<T, discussDeleteArgs>
    ): CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>>

    /**
     * Update one Discuss.
     * @param {discussUpdateArgs} args - Arguments to update one Discuss.
     * @example
     * // Update one Discuss
     * const discuss = await prisma.discuss.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends discussUpdateArgs>(
      args: SelectSubset<T, discussUpdateArgs>
    ): CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>>

    /**
     * Delete zero or more Discusses.
     * @param {discussDeleteManyArgs} args - Arguments to filter Discusses to delete.
     * @example
     * // Delete a few Discusses
     * const { count } = await prisma.discuss.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends discussDeleteManyArgs>(
      args?: SelectSubset<T, discussDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discusses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discusses
     * const discuss = await prisma.discuss.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends discussUpdateManyArgs>(
      args: SelectSubset<T, discussUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Discuss.
     * @param {discussUpsertArgs} args - Arguments to update or create a Discuss.
     * @example
     * // Update or create a Discuss
     * const discuss = await prisma.discuss.upsert({
     *   create: {
     *     // ... data to create a Discuss
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discuss we want to update
     *   }
     * })
    **/
    upsert<T extends discussUpsertArgs>(
      args: SelectSubset<T, discussUpsertArgs>
    ): CheckSelect<T, Prisma__discussClient<discuss>, Prisma__discussClient<discussGetPayload<T>>>

    /**
     * Count the number of Discusses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discussCountArgs} args - Arguments to filter Discusses to count.
     * @example
     * // Count the number of Discusses
     * const count = await prisma.discuss.count({
     *   where: {
     *     // ... the filter for the Discusses we want to count
     *   }
     * })
    **/
    count<T extends discussCountArgs>(
      args?: Subset<T, discussCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discuss.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussAggregateArgs>(args: Subset<T, DiscussAggregateArgs>): PrismaPromise<GetDiscussAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for discuss.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__discussClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksArgs = {}>(args?: Subset<T, booksArgs>): CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * discuss findUnique
   */
  export type discussFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * Throw an Error if a discuss can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which discuss to fetch.
    **/
    where: discussWhereUniqueInput
  }


  /**
   * discuss findFirst
   */
  export type discussFindFirstArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * Throw an Error if a discuss can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which discuss to fetch.
    **/
    where?: discussWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discusses to fetch.
    **/
    orderBy?: Enumerable<discussOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discusses.
    **/
    cursor?: discussWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discusses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discusses.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discusses.
    **/
    distinct?: Enumerable<DiscussScalarFieldEnum>
  }


  /**
   * discuss findMany
   */
  export type discussFindManyArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * Filter, which discusses to fetch.
    **/
    where?: discussWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discusses to fetch.
    **/
    orderBy?: Enumerable<discussOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discusses.
    **/
    cursor?: discussWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discusses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discusses.
    **/
    skip?: number
    distinct?: Enumerable<DiscussScalarFieldEnum>
  }


  /**
   * discuss create
   */
  export type discussCreateArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * The data needed to create a discuss.
    **/
    data: XOR<discussCreateInput, discussUncheckedCreateInput>
  }


  /**
   * discuss update
   */
  export type discussUpdateArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * The data needed to update a discuss.
    **/
    data: XOR<discussUpdateInput, discussUncheckedUpdateInput>
    /**
     * Choose, which discuss to update.
    **/
    where: discussWhereUniqueInput
  }


  /**
   * discuss updateMany
   */
  export type discussUpdateManyArgs = {
    data: XOR<discussUpdateManyMutationInput, discussUncheckedUpdateManyInput>
    where?: discussWhereInput
  }


  /**
   * discuss upsert
   */
  export type discussUpsertArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * The filter to search for the discuss to update in case it exists.
    **/
    where: discussWhereUniqueInput
    /**
     * In case the discuss found by the `where` argument doesn't exist, create a new discuss with this data.
    **/
    create: XOR<discussCreateInput, discussUncheckedCreateInput>
    /**
     * In case the discuss was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<discussUpdateInput, discussUncheckedUpdateInput>
  }


  /**
   * discuss delete
   */
  export type discussDeleteArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
    /**
     * Filter which discuss to delete.
    **/
    where: discussWhereUniqueInput
  }


  /**
   * discuss deleteMany
   */
  export type discussDeleteManyArgs = {
    where?: discussWhereInput
  }


  /**
   * discuss without action
   */
  export type discussArgs = {
    /**
     * Select specific fields to fetch from the discuss
    **/
    select?: discussSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: discussInclude | null
  }



  /**
   * Model rating
   */


  export type AggregateRating = {
    count: RatingCountAggregateOutputType | null
    avg: RatingAvgAggregateOutputType | null
    sum: RatingSumAggregateOutputType | null
    min: RatingMinAggregateOutputType | null
    max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number
    rating: number | null
    book_id: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number
    rating: number | null
    book_id: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number
    rating: number | null
    book_id: number | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number
    rating: number | null
    book_id: number | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    rating: number | null
    book_id: number | null
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    rating?: true
    book_id?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    rating?: true
    book_id?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    rating?: true
    book_id?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    rating?: true
    book_id?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    rating?: true
    book_id?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which rating to aggregate.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ratings
    **/
    count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
    [P in keyof T & keyof AggregateRating]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }



  export type ratingSelect = {
    id?: boolean
    rating?: boolean
    book_id?: boolean
    books?: boolean | booksArgs
  }

  export type ratingInclude = {
    books?: boolean | booksArgs
  }

  export type ratingGetPayload<
    S extends boolean | null | undefined | ratingArgs,
    U = keyof S
      > = S extends true
        ? rating
    : S extends undefined
    ? never
    : S extends ratingArgs | ratingFindManyArgs
    ?'include' extends U
    ? rating  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'books'
        ? booksGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rating ?rating [P]
  : 
          P extends 'books'
        ? booksGetPayload<S['select'][P]> | null : never
  } 
    : rating
  : rating


  type ratingCountArgs = Merge<
    Omit<ratingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }
  >

  export interface ratingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Rating that matches the filter.
     * @param {ratingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ratingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ratingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ratingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ratingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ratingFindManyArgs>(
      args?: SelectSubset<T, ratingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rating>>, PrismaPromise<Array<ratingGetPayload<T>>>>

    /**
     * Create a Rating.
     * @param {ratingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends ratingCreateArgs>(
      args: SelectSubset<T, ratingCreateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete a Rating.
     * @param {ratingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends ratingDeleteArgs>(
      args: SelectSubset<T, ratingDeleteArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Update one Rating.
     * @param {ratingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ratingUpdateArgs>(
      args: SelectSubset<T, ratingUpdateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete zero or more Ratings.
     * @param {ratingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ratingDeleteManyArgs>(
      args?: SelectSubset<T, ratingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ratingUpdateManyArgs>(
      args: SelectSubset<T, ratingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {ratingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends ratingUpsertArgs>(
      args: SelectSubset<T, ratingUpsertArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends ratingCountArgs>(
      args?: Subset<T, ratingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): PrismaPromise<GetRatingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ratingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    books<T extends booksArgs = {}>(args?: Subset<T, booksArgs>): CheckSelect<T, Prisma__booksClient<books | null >, Prisma__booksClient<booksGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rating findUnique
   */
  export type ratingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating findFirst
   */
  export type ratingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
    **/
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating findMany
   */
  export type ratingFindManyArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Filter, which ratings to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating create
   */
  export type ratingCreateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The data needed to create a rating.
    **/
    data: XOR<ratingCreateInput, ratingUncheckedCreateInput>
  }


  /**
   * rating update
   */
  export type ratingUpdateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The data needed to update a rating.
    **/
    data: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
    /**
     * Choose, which rating to update.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating updateMany
   */
  export type ratingUpdateManyArgs = {
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    where?: ratingWhereInput
  }


  /**
   * rating upsert
   */
  export type ratingUpsertArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * The filter to search for the rating to update in case it exists.
    **/
    where: ratingWhereUniqueInput
    /**
     * In case the rating found by the `where` argument doesn't exist, create a new rating with this data.
    **/
    create: XOR<ratingCreateInput, ratingUncheckedCreateInput>
    /**
     * In case the rating was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
  }


  /**
   * rating delete
   */
  export type ratingDeleteArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
    /**
     * Filter which rating to delete.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating deleteMany
   */
  export type ratingDeleteManyArgs = {
    where?: ratingWhereInput
  }


  /**
   * rating without action
   */
  export type ratingArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ratingInclude | null
  }



  /**
   * Model user_detail
   */


  export type AggregateUser_detail = {
    count: User_detailCountAggregateOutputType | null
    avg: User_detailAvgAggregateOutputType | null
    sum: User_detailSumAggregateOutputType | null
    min: User_detailMinAggregateOutputType | null
    max: User_detailMaxAggregateOutputType | null
  }

  export type User_detailAvgAggregateOutputType = {
    id: number
    user_id: number | null
    usia: number | null
  }

  export type User_detailSumAggregateOutputType = {
    id: number
    user_id: number | null
    usia: number | null
  }

  export type User_detailMinAggregateOutputType = {
    id: number
    user_id: number | null
    ktp: string | null
    alamat: string | null
    jenis_kelamin: string | null
    usia: number | null
    ttl: Date | null
  }

  export type User_detailMaxAggregateOutputType = {
    id: number
    user_id: number | null
    ktp: string | null
    alamat: string | null
    jenis_kelamin: string | null
    usia: number | null
    ttl: Date | null
  }

  export type User_detailCountAggregateOutputType = {
    id: number
    user_id: number | null
    ktp: number | null
    alamat: number | null
    jenis_kelamin: number | null
    usia: number | null
    ttl: number | null
    _all: number
  }


  export type User_detailAvgAggregateInputType = {
    id?: true
    user_id?: true
    usia?: true
  }

  export type User_detailSumAggregateInputType = {
    id?: true
    user_id?: true
    usia?: true
  }

  export type User_detailMinAggregateInputType = {
    id?: true
    user_id?: true
    ktp?: true
    alamat?: true
    jenis_kelamin?: true
    usia?: true
    ttl?: true
  }

  export type User_detailMaxAggregateInputType = {
    id?: true
    user_id?: true
    ktp?: true
    alamat?: true
    jenis_kelamin?: true
    usia?: true
    ttl?: true
  }

  export type User_detailCountAggregateInputType = {
    id?: true
    user_id?: true
    ktp?: true
    alamat?: true
    jenis_kelamin?: true
    usia?: true
    ttl?: true
    _all?: true
  }

  export type User_detailAggregateArgs = {
    /**
     * Filter which user_detail to aggregate.
    **/
    where?: user_detailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
    **/
    orderBy?: Enumerable<user_detailOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: user_detailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_details
    **/
    count?: true | User_detailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: User_detailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: User_detailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: User_detailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: User_detailMaxAggregateInputType
  }

  export type GetUser_detailAggregateType<T extends User_detailAggregateArgs> = {
    [P in keyof T & keyof AggregateUser_detail]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_detail[P]>
      : GetScalarType<T[P], AggregateUser_detail[P]>
  }



  export type user_detailSelect = {
    id?: boolean
    user_id?: boolean
    ktp?: boolean
    alamat?: boolean
    jenis_kelamin?: boolean
    usia?: boolean
    ttl?: boolean
    users?: boolean | usersArgs
  }

  export type user_detailInclude = {
    users?: boolean | usersArgs
  }

  export type user_detailGetPayload<
    S extends boolean | null | undefined | user_detailArgs,
    U = keyof S
      > = S extends true
        ? user_detail
    : S extends undefined
    ? never
    : S extends user_detailArgs | user_detailFindManyArgs
    ?'include' extends U
    ? user_detail  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user_detail ?user_detail [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> | null : never
  } 
    : user_detail
  : user_detail


  type user_detailCountArgs = Merge<
    Omit<user_detailFindManyArgs, 'select' | 'include'> & {
      select?: User_detailCountAggregateInputType | true
    }
  >

  export interface user_detailDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_detail that matches the filter.
     * @param {user_detailFindUniqueArgs} args - Arguments to find a User_detail
     * @example
     * // Get one User_detail
     * const user_detail = await prisma.user_detail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_detailFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_detailFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_detail'> extends True ? CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>> : CheckSelect<T, Prisma__user_detailClient<user_detail | null >, Prisma__user_detailClient<user_detailGetPayload<T> | null >>

    /**
     * Find the first User_detail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailFindFirstArgs} args - Arguments to find a User_detail
     * @example
     * // Get one User_detail
     * const user_detail = await prisma.user_detail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_detailFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_detailFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_detail'> extends True ? CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>> : CheckSelect<T, Prisma__user_detailClient<user_detail | null >, Prisma__user_detailClient<user_detailGetPayload<T> | null >>

    /**
     * Find zero or more User_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_details
     * const user_details = await prisma.user_detail.findMany()
     * 
     * // Get first 10 User_details
     * const user_details = await prisma.user_detail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_detailWithIdOnly = await prisma.user_detail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_detailFindManyArgs>(
      args?: SelectSubset<T, user_detailFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_detail>>, PrismaPromise<Array<user_detailGetPayload<T>>>>

    /**
     * Create a User_detail.
     * @param {user_detailCreateArgs} args - Arguments to create a User_detail.
     * @example
     * // Create one User_detail
     * const User_detail = await prisma.user_detail.create({
     *   data: {
     *     // ... data to create a User_detail
     *   }
     * })
     * 
    **/
    create<T extends user_detailCreateArgs>(
      args: SelectSubset<T, user_detailCreateArgs>
    ): CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>>

    /**
     * Delete a User_detail.
     * @param {user_detailDeleteArgs} args - Arguments to delete one User_detail.
     * @example
     * // Delete one User_detail
     * const User_detail = await prisma.user_detail.delete({
     *   where: {
     *     // ... filter to delete one User_detail
     *   }
     * })
     * 
    **/
    delete<T extends user_detailDeleteArgs>(
      args: SelectSubset<T, user_detailDeleteArgs>
    ): CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>>

    /**
     * Update one User_detail.
     * @param {user_detailUpdateArgs} args - Arguments to update one User_detail.
     * @example
     * // Update one User_detail
     * const user_detail = await prisma.user_detail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_detailUpdateArgs>(
      args: SelectSubset<T, user_detailUpdateArgs>
    ): CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>>

    /**
     * Delete zero or more User_details.
     * @param {user_detailDeleteManyArgs} args - Arguments to filter User_details to delete.
     * @example
     * // Delete a few User_details
     * const { count } = await prisma.user_detail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_detailDeleteManyArgs>(
      args?: SelectSubset<T, user_detailDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_details
     * const user_detail = await prisma.user_detail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_detailUpdateManyArgs>(
      args: SelectSubset<T, user_detailUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_detail.
     * @param {user_detailUpsertArgs} args - Arguments to update or create a User_detail.
     * @example
     * // Update or create a User_detail
     * const user_detail = await prisma.user_detail.upsert({
     *   create: {
     *     // ... data to create a User_detail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_detail we want to update
     *   }
     * })
    **/
    upsert<T extends user_detailUpsertArgs>(
      args: SelectSubset<T, user_detailUpsertArgs>
    ): CheckSelect<T, Prisma__user_detailClient<user_detail>, Prisma__user_detailClient<user_detailGetPayload<T>>>

    /**
     * Count the number of User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailCountArgs} args - Arguments to filter User_details to count.
     * @example
     * // Count the number of User_details
     * const count = await prisma.user_detail.count({
     *   where: {
     *     // ... the filter for the User_details we want to count
     *   }
     * })
    **/
    count<T extends user_detailCountArgs>(
      args?: Subset<T, user_detailCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_detailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_detail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_detailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_detailAggregateArgs>(args: Subset<T, User_detailAggregateArgs>): PrismaPromise<GetUser_detailAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user_detail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_detailClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_detail findUnique
   */
  export type user_detailFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * Throw an Error if a user_detail can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_detail to fetch.
    **/
    where: user_detailWhereUniqueInput
  }


  /**
   * user_detail findFirst
   */
  export type user_detailFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * Throw an Error if a user_detail can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_detail to fetch.
    **/
    where?: user_detailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
    **/
    orderBy?: Enumerable<user_detailOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_details.
    **/
    cursor?: user_detailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_details.
    **/
    distinct?: Enumerable<User_detailScalarFieldEnum>
  }


  /**
   * user_detail findMany
   */
  export type user_detailFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * Filter, which user_details to fetch.
    **/
    where?: user_detailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
    **/
    orderBy?: Enumerable<user_detailOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_details.
    **/
    cursor?: user_detailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
    **/
    skip?: number
    distinct?: Enumerable<User_detailScalarFieldEnum>
  }


  /**
   * user_detail create
   */
  export type user_detailCreateArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * The data needed to create a user_detail.
    **/
    data: XOR<user_detailCreateInput, user_detailUncheckedCreateInput>
  }


  /**
   * user_detail update
   */
  export type user_detailUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * The data needed to update a user_detail.
    **/
    data: XOR<user_detailUpdateInput, user_detailUncheckedUpdateInput>
    /**
     * Choose, which user_detail to update.
    **/
    where: user_detailWhereUniqueInput
  }


  /**
   * user_detail updateMany
   */
  export type user_detailUpdateManyArgs = {
    data: XOR<user_detailUpdateManyMutationInput, user_detailUncheckedUpdateManyInput>
    where?: user_detailWhereInput
  }


  /**
   * user_detail upsert
   */
  export type user_detailUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * The filter to search for the user_detail to update in case it exists.
    **/
    where: user_detailWhereUniqueInput
    /**
     * In case the user_detail found by the `where` argument doesn't exist, create a new user_detail with this data.
    **/
    create: XOR<user_detailCreateInput, user_detailUncheckedCreateInput>
    /**
     * In case the user_detail was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<user_detailUpdateInput, user_detailUncheckedUpdateInput>
  }


  /**
   * user_detail delete
   */
  export type user_detailDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
    /**
     * Filter which user_detail to delete.
    **/
    where: user_detailWhereUniqueInput
  }


  /**
   * user_detail deleteMany
   */
  export type user_detailDeleteManyArgs = {
    where?: user_detailWhereInput
  }


  /**
   * user_detail without action
   */
  export type user_detailArgs = {
    /**
     * Select specific fields to fetch from the user_detail
    **/
    select?: user_detailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: user_detailInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BooksScalarFieldEnum: {
    id: 'id',
    title: 'title',
    creator: 'creator',
    publisher: 'publisher',
    id_category: 'id_category',
    isbn: 'isbn',
    pages: 'pages',
    cover: 'cover',
    id_user: 'id_user',
    descriptions: 'descriptions'
  };

  export type BooksScalarFieldEnum = (typeof BooksScalarFieldEnum)[keyof typeof BooksScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name_category: 'name_category',
    icon: 'icon'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const BorrowingScalarFieldEnum: {
    id: 'id',
    borrower_name: 'borrower_name',
    book_id: 'book_id',
    user_id: 'user_id',
    start_date: 'start_date',
    end_date: 'end_date',
    status: 'status'
  };

  export type BorrowingScalarFieldEnum = (typeof BorrowingScalarFieldEnum)[keyof typeof BorrowingScalarFieldEnum]


  export const DiscussScalarFieldEnum: {
    id: 'id',
    book_id: 'book_id',
    user_id: 'user_id',
    discuss: 'discuss'
  };

  export type DiscussScalarFieldEnum = (typeof DiscussScalarFieldEnum)[keyof typeof DiscussScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    book_id: 'book_id'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const User_detailScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ktp: 'ktp',
    alamat: 'alamat',
    jenis_kelamin: 'jenis_kelamin',
    usia: 'usia',
    ttl: 'ttl'
  };

  export type User_detailScalarFieldEnum = (typeof User_detailScalarFieldEnum)[keyof typeof User_detailScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type booksWhereInput = {
    AND?: Enumerable<booksWhereInput>
    OR?: Enumerable<booksWhereInput>
    NOT?: Enumerable<booksWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    creator?: StringNullableFilter | string | null
    publisher?: StringNullableFilter | string | null
    id_category?: IntNullableFilter | number | null
    isbn?: StringNullableFilter | string | null
    pages?: StringNullableFilter | string | null
    cover?: StringNullableFilter | string | null
    id_user?: IntNullableFilter | number | null
    descriptions?: StringNullableFilter | string | null
    category?: XOR<CategoryRelationFilter, categoryWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
    borrowing?: BorrowingListRelationFilter
    discuss?: DiscussListRelationFilter
    rating?: RatingListRelationFilter
  }

  export type booksOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    creator?: SortOrder
    publisher?: SortOrder
    id_category?: SortOrder
    isbn?: SortOrder
    pages?: SortOrder
    cover?: SortOrder
    id_user?: SortOrder
    descriptions?: SortOrder
    category?: categoryOrderByInput
    users?: usersOrderByInput
  }

  export type booksWhereUniqueInput = {
    id?: number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    books?: BooksListRelationFilter
    borrowing?: BorrowingListRelationFilter
    discuss?: DiscussListRelationFilter
    user_detail?: User_detailListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
  }

  export type categoryWhereInput = {
    AND?: Enumerable<categoryWhereInput>
    OR?: Enumerable<categoryWhereInput>
    NOT?: Enumerable<categoryWhereInput>
    id?: IntFilter | number
    name_category?: StringNullableFilter | string | null
    icon?: StringNullableFilter | string | null
    books?: BooksListRelationFilter
  }

  export type categoryOrderByInput = {
    id?: SortOrder
    name_category?: SortOrder
    icon?: SortOrder
  }

  export type categoryWhereUniqueInput = {
    id?: number
  }

  export type borrowingWhereInput = {
    AND?: Enumerable<borrowingWhereInput>
    OR?: Enumerable<borrowingWhereInput>
    NOT?: Enumerable<borrowingWhereInput>
    id?: IntFilter | number
    borrower_name?: StringFilter | string
    book_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    status?: StringNullableFilter | string | null
    books?: XOR<BooksRelationFilter, booksWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type borrowingOrderByInput = {
    id?: SortOrder
    borrower_name?: SortOrder
    book_id?: SortOrder
    user_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
    books?: booksOrderByInput
    users?: usersOrderByInput
  }

  export type borrowingWhereUniqueInput = {
    id?: number
  }

  export type discussWhereInput = {
    AND?: Enumerable<discussWhereInput>
    OR?: Enumerable<discussWhereInput>
    NOT?: Enumerable<discussWhereInput>
    id?: IntFilter | number
    book_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    discuss?: StringNullableFilter | string | null
    books?: XOR<BooksRelationFilter, booksWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type discussOrderByInput = {
    id?: SortOrder
    book_id?: SortOrder
    user_id?: SortOrder
    discuss?: SortOrder
    books?: booksOrderByInput
    users?: usersOrderByInput
  }

  export type discussWhereUniqueInput = {
    id?: number
  }

  export type ratingWhereInput = {
    AND?: Enumerable<ratingWhereInput>
    OR?: Enumerable<ratingWhereInput>
    NOT?: Enumerable<ratingWhereInput>
    id?: IntFilter | number
    rating?: IntNullableFilter | number | null
    book_id?: IntNullableFilter | number | null
    books?: XOR<BooksRelationFilter, booksWhereInput> | null
  }

  export type ratingOrderByInput = {
    id?: SortOrder
    rating?: SortOrder
    book_id?: SortOrder
    books?: booksOrderByInput
  }

  export type ratingWhereUniqueInput = {
    id?: number
  }

  export type user_detailWhereInput = {
    AND?: Enumerable<user_detailWhereInput>
    OR?: Enumerable<user_detailWhereInput>
    NOT?: Enumerable<user_detailWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    ktp?: StringNullableFilter | string | null
    alamat?: StringNullableFilter | string | null
    jenis_kelamin?: StringNullableFilter | string | null
    usia?: IntNullableFilter | number | null
    ttl?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type user_detailOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    ktp?: SortOrder
    alamat?: SortOrder
    jenis_kelamin?: SortOrder
    usia?: SortOrder
    ttl?: SortOrder
    users?: usersOrderByInput
  }

  export type user_detailWhereUniqueInput = {
    id?: number
  }

  export type booksCreateInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    category?: categoryCreateNestedOneWithoutBooksInput
    users?: usersCreateNestedOneWithoutBooksInput
    borrowing?: borrowingCreateNestedManyWithoutBooksInput
    discuss?: discussCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    id_category?: number | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    id_user?: number | null
    descriptions?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutBooksInput
    discuss?: discussUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutBooksInput
    users?: usersUpdateOneWithoutBooksInput
    borrowing?: borrowingUpdateManyWithoutBooksInput
    discuss?: discussUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutBooksInput
    discuss?: discussUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type booksUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type booksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksCreateNestedManyWithoutUsersInput
    borrowing?: borrowingCreateNestedManyWithoutUsersInput
    discuss?: discussCreateNestedManyWithoutUsersInput
    user_detail?: user_detailCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksUncheckedCreateNestedManyWithoutUsersInput
    borrowing?: borrowingUncheckedCreateNestedManyWithoutUsersInput
    discuss?: discussUncheckedCreateNestedManyWithoutUsersInput
    user_detail?: user_detailUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutUsersInput
    borrowing?: borrowingUpdateManyWithoutUsersInput
    discuss?: discussUpdateManyWithoutUsersInput
    user_detail?: user_detailUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutUsersInput
    borrowing?: borrowingUncheckedUpdateManyWithoutUsersInput
    discuss?: discussUncheckedUpdateManyWithoutUsersInput
    user_detail?: user_detailUncheckedUpdateManyWithoutUsersInput
  }

  export type usersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryCreateInput = {
    name_category?: string | null
    icon?: string | null
    books?: booksCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    name_category?: string | null
    icon?: string | null
    books?: booksUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutCategoryInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutCategoryInput
  }

  export type categoryUpdateManyMutationInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type borrowingCreateInput = {
    borrower_name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
    books?: booksCreateNestedOneWithoutBorrowingInput
    users?: usersCreateNestedOneWithoutBorrowingInput
  }

  export type borrowingUncheckedCreateInput = {
    id?: number
    borrower_name: string
    book_id?: number | null
    user_id?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
  }

  export type borrowingUpdateInput = {
    borrower_name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutBorrowingInput
    users?: usersUpdateOneWithoutBorrowingInput
  }

  export type borrowingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    borrower_name?: StringFieldUpdateOperationsInput | string
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type borrowingUpdateManyMutationInput = {
    borrower_name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type borrowingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    borrower_name?: StringFieldUpdateOperationsInput | string
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussCreateInput = {
    discuss?: string | null
    books?: booksCreateNestedOneWithoutDiscussInput
    users?: usersCreateNestedOneWithoutDiscussInput
  }

  export type discussUncheckedCreateInput = {
    id?: number
    book_id?: number | null
    user_id?: number | null
    discuss?: string | null
  }

  export type discussUpdateInput = {
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutDiscussInput
    users?: usersUpdateOneWithoutDiscussInput
  }

  export type discussUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussUpdateManyMutationInput = {
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ratingCreateInput = {
    rating?: number | null
    books?: booksCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateInput = {
    id?: number
    rating?: number | null
    book_id?: number | null
  }

  export type ratingUpdateInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    books?: booksUpdateOneWithoutRatingInput
  }

  export type ratingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUpdateManyMutationInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_detailCreateInput = {
    ktp?: string | null
    alamat?: string | null
    jenis_kelamin?: string | null
    usia?: number | null
    ttl?: Date | string | null
    users?: usersCreateNestedOneWithoutUser_detailInput
  }

  export type user_detailUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    ktp?: string | null
    alamat?: string | null
    jenis_kelamin?: string | null
    usia?: number | null
    ttl?: Date | string | null
  }

  export type user_detailUpdateInput = {
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutUser_detailInput
  }

  export type user_detailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_detailUpdateManyMutationInput = {
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_detailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type BorrowingListRelationFilter = {
    every?: borrowingWhereInput
    some?: borrowingWhereInput
    none?: borrowingWhereInput
  }

  export type DiscussListRelationFilter = {
    every?: discussWhereInput
    some?: discussWhereInput
    none?: discussWhereInput
  }

  export type RatingListRelationFilter = {
    every?: ratingWhereInput
    some?: ratingWhereInput
    none?: ratingWhereInput
  }

  export type BooksListRelationFilter = {
    every?: booksWhereInput
    some?: booksWhereInput
    none?: booksWhereInput
  }

  export type User_detailListRelationFilter = {
    every?: user_detailWhereInput
    some?: user_detailWhereInput
    none?: user_detailWhereInput
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BooksRelationFilter = {
    is?: booksWhereInput | null
    isNot?: booksWhereInput | null
  }

  export type categoryCreateNestedOneWithoutBooksInput = {
    create?: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBooksInput
    connect?: categoryWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutBooksInput = {
    create?: XOR<usersCreateWithoutBooksInput, usersUncheckedCreateWithoutBooksInput>
    connectOrCreate?: usersCreateOrConnectWithoutBooksInput
    connect?: usersWhereUniqueInput
  }

  export type borrowingCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutBooksInput>, Enumerable<borrowingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
  }

  export type discussCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussCreateWithoutBooksInput>, Enumerable<discussUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<discussWhereUniqueInput>
  }

  export type ratingCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
  }

  export type borrowingUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutBooksInput>, Enumerable<borrowingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
  }

  export type discussUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussCreateWithoutBooksInput>, Enumerable<discussUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<discussWhereUniqueInput>
  }

  export type ratingUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoryUpdateOneWithoutBooksInput = {
    create?: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: categoryCreateOrConnectWithoutBooksInput
    upsert?: categoryUpsertWithoutBooksInput
    connect?: categoryWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<categoryUpdateWithoutBooksInput, categoryUncheckedUpdateWithoutBooksInput>
  }

  export type usersUpdateOneWithoutBooksInput = {
    create?: XOR<usersCreateWithoutBooksInput, usersUncheckedCreateWithoutBooksInput>
    connectOrCreate?: usersCreateOrConnectWithoutBooksInput
    upsert?: usersUpsertWithoutBooksInput
    connect?: usersWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<usersUpdateWithoutBooksInput, usersUncheckedUpdateWithoutBooksInput>
  }

  export type borrowingUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutBooksInput>, Enumerable<borrowingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<borrowingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
    set?: Enumerable<borrowingWhereUniqueInput>
    disconnect?: Enumerable<borrowingWhereUniqueInput>
    delete?: Enumerable<borrowingWhereUniqueInput>
    update?: Enumerable<borrowingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<borrowingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<borrowingScalarWhereInput>
  }

  export type discussUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussCreateWithoutBooksInput>, Enumerable<discussUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<discussUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<discussWhereUniqueInput>
    set?: Enumerable<discussWhereUniqueInput>
    disconnect?: Enumerable<discussWhereUniqueInput>
    delete?: Enumerable<discussWhereUniqueInput>
    update?: Enumerable<discussUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<discussUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<discussScalarWhereInput>
  }

  export type ratingUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<ratingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
    set?: Enumerable<ratingWhereUniqueInput>
    disconnect?: Enumerable<ratingWhereUniqueInput>
    delete?: Enumerable<ratingWhereUniqueInput>
    update?: Enumerable<ratingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<ratingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<ratingScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type borrowingUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutBooksInput>, Enumerable<borrowingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<borrowingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
    set?: Enumerable<borrowingWhereUniqueInput>
    disconnect?: Enumerable<borrowingWhereUniqueInput>
    delete?: Enumerable<borrowingWhereUniqueInput>
    update?: Enumerable<borrowingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<borrowingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<borrowingScalarWhereInput>
  }

  export type discussUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<discussCreateWithoutBooksInput>, Enumerable<discussUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<discussUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<discussWhereUniqueInput>
    set?: Enumerable<discussWhereUniqueInput>
    disconnect?: Enumerable<discussWhereUniqueInput>
    delete?: Enumerable<discussWhereUniqueInput>
    update?: Enumerable<discussUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<discussUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<discussScalarWhereInput>
  }

  export type ratingUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<ratingCreateWithoutBooksInput>, Enumerable<ratingUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<ratingCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<ratingUpsertWithWhereUniqueWithoutBooksInput>
    connect?: Enumerable<ratingWhereUniqueInput>
    set?: Enumerable<ratingWhereUniqueInput>
    disconnect?: Enumerable<ratingWhereUniqueInput>
    delete?: Enumerable<ratingWhereUniqueInput>
    update?: Enumerable<ratingUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<ratingUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<ratingScalarWhereInput>
  }

  export type booksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<booksCreateWithoutUsersInput>, Enumerable<booksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type borrowingCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutUsersInput>, Enumerable<borrowingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
  }

  export type discussCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<discussCreateWithoutUsersInput>, Enumerable<discussUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<discussWhereUniqueInput>
  }

  export type user_detailCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_detailCreateWithoutUsersInput>, Enumerable<user_detailUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_detailCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<user_detailWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<booksCreateWithoutUsersInput>, Enumerable<booksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type borrowingUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutUsersInput>, Enumerable<borrowingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
  }

  export type discussUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<discussCreateWithoutUsersInput>, Enumerable<discussUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<discussWhereUniqueInput>
  }

  export type user_detailUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_detailCreateWithoutUsersInput>, Enumerable<user_detailUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_detailCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<user_detailWhereUniqueInput>
  }

  export type booksUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<booksCreateWithoutUsersInput>, Enumerable<booksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type borrowingUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutUsersInput>, Enumerable<borrowingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<borrowingUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
    set?: Enumerable<borrowingWhereUniqueInput>
    disconnect?: Enumerable<borrowingWhereUniqueInput>
    delete?: Enumerable<borrowingWhereUniqueInput>
    update?: Enumerable<borrowingUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<borrowingUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<borrowingScalarWhereInput>
  }

  export type discussUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<discussCreateWithoutUsersInput>, Enumerable<discussUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<discussUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<discussWhereUniqueInput>
    set?: Enumerable<discussWhereUniqueInput>
    disconnect?: Enumerable<discussWhereUniqueInput>
    delete?: Enumerable<discussWhereUniqueInput>
    update?: Enumerable<discussUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<discussUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<discussScalarWhereInput>
  }

  export type user_detailUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_detailCreateWithoutUsersInput>, Enumerable<user_detailUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_detailCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_detailUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<user_detailWhereUniqueInput>
    set?: Enumerable<user_detailWhereUniqueInput>
    disconnect?: Enumerable<user_detailWhereUniqueInput>
    delete?: Enumerable<user_detailWhereUniqueInput>
    update?: Enumerable<user_detailUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_detailUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_detailScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<booksCreateWithoutUsersInput>, Enumerable<booksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type borrowingUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<borrowingCreateWithoutUsersInput>, Enumerable<borrowingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<borrowingCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<borrowingUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<borrowingWhereUniqueInput>
    set?: Enumerable<borrowingWhereUniqueInput>
    disconnect?: Enumerable<borrowingWhereUniqueInput>
    delete?: Enumerable<borrowingWhereUniqueInput>
    update?: Enumerable<borrowingUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<borrowingUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<borrowingScalarWhereInput>
  }

  export type discussUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<discussCreateWithoutUsersInput>, Enumerable<discussUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<discussCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<discussUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<discussWhereUniqueInput>
    set?: Enumerable<discussWhereUniqueInput>
    disconnect?: Enumerable<discussWhereUniqueInput>
    delete?: Enumerable<discussWhereUniqueInput>
    update?: Enumerable<discussUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<discussUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<discussScalarWhereInput>
  }

  export type user_detailUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_detailCreateWithoutUsersInput>, Enumerable<user_detailUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_detailCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_detailUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<user_detailWhereUniqueInput>
    set?: Enumerable<user_detailWhereUniqueInput>
    disconnect?: Enumerable<user_detailWhereUniqueInput>
    delete?: Enumerable<user_detailWhereUniqueInput>
    update?: Enumerable<user_detailUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_detailUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_detailScalarWhereInput>
  }

  export type booksCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
  }

  export type booksUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<booksCreateWithoutCategoryInput>, Enumerable<booksUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<booksCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<booksUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<booksWhereUniqueInput>
    set?: Enumerable<booksWhereUniqueInput>
    disconnect?: Enumerable<booksWhereUniqueInput>
    delete?: Enumerable<booksWhereUniqueInput>
    update?: Enumerable<booksUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<booksUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<booksScalarWhereInput>
  }

  export type booksCreateNestedOneWithoutBorrowingInput = {
    create?: XOR<booksCreateWithoutBorrowingInput, booksUncheckedCreateWithoutBorrowingInput>
    connectOrCreate?: booksCreateOrConnectWithoutBorrowingInput
    connect?: booksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutBorrowingInput = {
    create?: XOR<usersCreateWithoutBorrowingInput, usersUncheckedCreateWithoutBorrowingInput>
    connectOrCreate?: usersCreateOrConnectWithoutBorrowingInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type booksUpdateOneWithoutBorrowingInput = {
    create?: XOR<booksCreateWithoutBorrowingInput, booksUncheckedCreateWithoutBorrowingInput>
    connectOrCreate?: booksCreateOrConnectWithoutBorrowingInput
    upsert?: booksUpsertWithoutBorrowingInput
    connect?: booksWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<booksUpdateWithoutBorrowingInput, booksUncheckedUpdateWithoutBorrowingInput>
  }

  export type usersUpdateOneWithoutBorrowingInput = {
    create?: XOR<usersCreateWithoutBorrowingInput, usersUncheckedCreateWithoutBorrowingInput>
    connectOrCreate?: usersCreateOrConnectWithoutBorrowingInput
    upsert?: usersUpsertWithoutBorrowingInput
    connect?: usersWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<usersUpdateWithoutBorrowingInput, usersUncheckedUpdateWithoutBorrowingInput>
  }

  export type booksCreateNestedOneWithoutDiscussInput = {
    create?: XOR<booksCreateWithoutDiscussInput, booksUncheckedCreateWithoutDiscussInput>
    connectOrCreate?: booksCreateOrConnectWithoutDiscussInput
    connect?: booksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutDiscussInput = {
    create?: XOR<usersCreateWithoutDiscussInput, usersUncheckedCreateWithoutDiscussInput>
    connectOrCreate?: usersCreateOrConnectWithoutDiscussInput
    connect?: usersWhereUniqueInput
  }

  export type booksUpdateOneWithoutDiscussInput = {
    create?: XOR<booksCreateWithoutDiscussInput, booksUncheckedCreateWithoutDiscussInput>
    connectOrCreate?: booksCreateOrConnectWithoutDiscussInput
    upsert?: booksUpsertWithoutDiscussInput
    connect?: booksWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<booksUpdateWithoutDiscussInput, booksUncheckedUpdateWithoutDiscussInput>
  }

  export type usersUpdateOneWithoutDiscussInput = {
    create?: XOR<usersCreateWithoutDiscussInput, usersUncheckedCreateWithoutDiscussInput>
    connectOrCreate?: usersCreateOrConnectWithoutDiscussInput
    upsert?: usersUpsertWithoutDiscussInput
    connect?: usersWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<usersUpdateWithoutDiscussInput, usersUncheckedUpdateWithoutDiscussInput>
  }

  export type booksCreateNestedOneWithoutRatingInput = {
    create?: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
    connectOrCreate?: booksCreateOrConnectWithoutRatingInput
    connect?: booksWhereUniqueInput
  }

  export type booksUpdateOneWithoutRatingInput = {
    create?: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
    connectOrCreate?: booksCreateOrConnectWithoutRatingInput
    upsert?: booksUpsertWithoutRatingInput
    connect?: booksWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<booksUpdateWithoutRatingInput, booksUncheckedUpdateWithoutRatingInput>
  }

  export type usersCreateNestedOneWithoutUser_detailInput = {
    create?: XOR<usersCreateWithoutUser_detailInput, usersUncheckedCreateWithoutUser_detailInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_detailInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutUser_detailInput = {
    create?: XOR<usersCreateWithoutUser_detailInput, usersUncheckedCreateWithoutUser_detailInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_detailInput
    upsert?: usersUpsertWithoutUser_detailInput
    connect?: usersWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<usersUpdateWithoutUser_detailInput, usersUncheckedUpdateWithoutUser_detailInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type categoryCreateWithoutBooksInput = {
    name_category?: string | null
    icon?: string | null
  }

  export type categoryUncheckedCreateWithoutBooksInput = {
    id?: number
    name_category?: string | null
    icon?: string | null
  }

  export type categoryCreateOrConnectWithoutBooksInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
  }

  export type usersCreateWithoutBooksInput = {
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    borrowing?: borrowingCreateNestedManyWithoutUsersInput
    discuss?: discussCreateNestedManyWithoutUsersInput
    user_detail?: user_detailCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutBooksInput = {
    id?: number
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutUsersInput
    discuss?: discussUncheckedCreateNestedManyWithoutUsersInput
    user_detail?: user_detailUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutBooksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBooksInput, usersUncheckedCreateWithoutBooksInput>
  }

  export type borrowingCreateWithoutBooksInput = {
    borrower_name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
    users?: usersCreateNestedOneWithoutBorrowingInput
  }

  export type borrowingUncheckedCreateWithoutBooksInput = {
    id?: number
    borrower_name: string
    user_id?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
  }

  export type borrowingCreateOrConnectWithoutBooksInput = {
    where: borrowingWhereUniqueInput
    create: XOR<borrowingCreateWithoutBooksInput, borrowingUncheckedCreateWithoutBooksInput>
  }

  export type discussCreateWithoutBooksInput = {
    discuss?: string | null
    users?: usersCreateNestedOneWithoutDiscussInput
  }

  export type discussUncheckedCreateWithoutBooksInput = {
    id?: number
    user_id?: number | null
    discuss?: string | null
  }

  export type discussCreateOrConnectWithoutBooksInput = {
    where: discussWhereUniqueInput
    create: XOR<discussCreateWithoutBooksInput, discussUncheckedCreateWithoutBooksInput>
  }

  export type ratingCreateWithoutBooksInput = {
    rating?: number | null
  }

  export type ratingUncheckedCreateWithoutBooksInput = {
    id?: number
    rating?: number | null
  }

  export type ratingCreateOrConnectWithoutBooksInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutBooksInput, ratingUncheckedCreateWithoutBooksInput>
  }

  export type categoryUpsertWithoutBooksInput = {
    update: XOR<categoryUpdateWithoutBooksInput, categoryUncheckedUpdateWithoutBooksInput>
    create: XOR<categoryCreateWithoutBooksInput, categoryUncheckedCreateWithoutBooksInput>
  }

  export type categoryUpdateWithoutBooksInput = {
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_category?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUpsertWithoutBooksInput = {
    update: XOR<usersUpdateWithoutBooksInput, usersUncheckedUpdateWithoutBooksInput>
    create: XOR<usersCreateWithoutBooksInput, usersUncheckedCreateWithoutBooksInput>
  }

  export type usersUpdateWithoutBooksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUpdateManyWithoutUsersInput
    discuss?: discussUpdateManyWithoutUsersInput
    user_detail?: user_detailUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutUsersInput
    discuss?: discussUncheckedUpdateManyWithoutUsersInput
    user_detail?: user_detailUncheckedUpdateManyWithoutUsersInput
  }

  export type borrowingUpsertWithWhereUniqueWithoutBooksInput = {
    where: borrowingWhereUniqueInput
    update: XOR<borrowingUpdateWithoutBooksInput, borrowingUncheckedUpdateWithoutBooksInput>
    create: XOR<borrowingCreateWithoutBooksInput, borrowingUncheckedCreateWithoutBooksInput>
  }

  export type borrowingUpdateWithWhereUniqueWithoutBooksInput = {
    where: borrowingWhereUniqueInput
    data: XOR<borrowingUpdateWithoutBooksInput, borrowingUncheckedUpdateWithoutBooksInput>
  }

  export type borrowingUpdateManyWithWhereWithoutBooksInput = {
    where: borrowingScalarWhereInput
    data: XOR<borrowingUpdateManyMutationInput, borrowingUncheckedUpdateManyWithoutBorrowingInput>
  }

  export type borrowingScalarWhereInput = {
    AND?: Enumerable<borrowingScalarWhereInput>
    OR?: Enumerable<borrowingScalarWhereInput>
    NOT?: Enumerable<borrowingScalarWhereInput>
    id?: IntFilter | number
    borrower_name?: StringFilter | string
    book_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    status?: StringNullableFilter | string | null
  }

  export type discussUpsertWithWhereUniqueWithoutBooksInput = {
    where: discussWhereUniqueInput
    update: XOR<discussUpdateWithoutBooksInput, discussUncheckedUpdateWithoutBooksInput>
    create: XOR<discussCreateWithoutBooksInput, discussUncheckedCreateWithoutBooksInput>
  }

  export type discussUpdateWithWhereUniqueWithoutBooksInput = {
    where: discussWhereUniqueInput
    data: XOR<discussUpdateWithoutBooksInput, discussUncheckedUpdateWithoutBooksInput>
  }

  export type discussUpdateManyWithWhereWithoutBooksInput = {
    where: discussScalarWhereInput
    data: XOR<discussUpdateManyMutationInput, discussUncheckedUpdateManyWithoutDiscussInput>
  }

  export type discussScalarWhereInput = {
    AND?: Enumerable<discussScalarWhereInput>
    OR?: Enumerable<discussScalarWhereInput>
    NOT?: Enumerable<discussScalarWhereInput>
    id?: IntFilter | number
    book_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    discuss?: StringNullableFilter | string | null
  }

  export type ratingUpsertWithWhereUniqueWithoutBooksInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutBooksInput, ratingUncheckedUpdateWithoutBooksInput>
    create: XOR<ratingCreateWithoutBooksInput, ratingUncheckedCreateWithoutBooksInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutBooksInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutBooksInput, ratingUncheckedUpdateWithoutBooksInput>
  }

  export type ratingUpdateManyWithWhereWithoutBooksInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutRatingInput>
  }

  export type ratingScalarWhereInput = {
    AND?: Enumerable<ratingScalarWhereInput>
    OR?: Enumerable<ratingScalarWhereInput>
    NOT?: Enumerable<ratingScalarWhereInput>
    id?: IntFilter | number
    rating?: IntNullableFilter | number | null
    book_id?: IntNullableFilter | number | null
  }

  export type booksCreateWithoutUsersInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    category?: categoryCreateNestedOneWithoutBooksInput
    borrowing?: borrowingCreateNestedManyWithoutBooksInput
    discuss?: discussCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutUsersInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    id_category?: number | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutBooksInput
    discuss?: discussUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutUsersInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutUsersInput, booksUncheckedCreateWithoutUsersInput>
  }

  export type borrowingCreateWithoutUsersInput = {
    borrower_name: string
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
    books?: booksCreateNestedOneWithoutBorrowingInput
  }

  export type borrowingUncheckedCreateWithoutUsersInput = {
    id?: number
    borrower_name: string
    book_id?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    status?: string | null
  }

  export type borrowingCreateOrConnectWithoutUsersInput = {
    where: borrowingWhereUniqueInput
    create: XOR<borrowingCreateWithoutUsersInput, borrowingUncheckedCreateWithoutUsersInput>
  }

  export type discussCreateWithoutUsersInput = {
    discuss?: string | null
    books?: booksCreateNestedOneWithoutDiscussInput
  }

  export type discussUncheckedCreateWithoutUsersInput = {
    id?: number
    book_id?: number | null
    discuss?: string | null
  }

  export type discussCreateOrConnectWithoutUsersInput = {
    where: discussWhereUniqueInput
    create: XOR<discussCreateWithoutUsersInput, discussUncheckedCreateWithoutUsersInput>
  }

  export type user_detailCreateWithoutUsersInput = {
    ktp?: string | null
    alamat?: string | null
    jenis_kelamin?: string | null
    usia?: number | null
    ttl?: Date | string | null
  }

  export type user_detailUncheckedCreateWithoutUsersInput = {
    id?: number
    ktp?: string | null
    alamat?: string | null
    jenis_kelamin?: string | null
    usia?: number | null
    ttl?: Date | string | null
  }

  export type user_detailCreateOrConnectWithoutUsersInput = {
    where: user_detailWhereUniqueInput
    create: XOR<user_detailCreateWithoutUsersInput, user_detailUncheckedCreateWithoutUsersInput>
  }

  export type booksUpsertWithWhereUniqueWithoutUsersInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutUsersInput, booksUncheckedUpdateWithoutUsersInput>
    create: XOR<booksCreateWithoutUsersInput, booksUncheckedCreateWithoutUsersInput>
  }

  export type booksUpdateWithWhereUniqueWithoutUsersInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutUsersInput, booksUncheckedUpdateWithoutUsersInput>
  }

  export type booksUpdateManyWithWhereWithoutUsersInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBooksInput>
  }

  export type booksScalarWhereInput = {
    AND?: Enumerable<booksScalarWhereInput>
    OR?: Enumerable<booksScalarWhereInput>
    NOT?: Enumerable<booksScalarWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    creator?: StringNullableFilter | string | null
    publisher?: StringNullableFilter | string | null
    id_category?: IntNullableFilter | number | null
    isbn?: StringNullableFilter | string | null
    pages?: StringNullableFilter | string | null
    cover?: StringNullableFilter | string | null
    id_user?: IntNullableFilter | number | null
    descriptions?: StringNullableFilter | string | null
  }

  export type borrowingUpsertWithWhereUniqueWithoutUsersInput = {
    where: borrowingWhereUniqueInput
    update: XOR<borrowingUpdateWithoutUsersInput, borrowingUncheckedUpdateWithoutUsersInput>
    create: XOR<borrowingCreateWithoutUsersInput, borrowingUncheckedCreateWithoutUsersInput>
  }

  export type borrowingUpdateWithWhereUniqueWithoutUsersInput = {
    where: borrowingWhereUniqueInput
    data: XOR<borrowingUpdateWithoutUsersInput, borrowingUncheckedUpdateWithoutUsersInput>
  }

  export type borrowingUpdateManyWithWhereWithoutUsersInput = {
    where: borrowingScalarWhereInput
    data: XOR<borrowingUpdateManyMutationInput, borrowingUncheckedUpdateManyWithoutBorrowingInput>
  }

  export type discussUpsertWithWhereUniqueWithoutUsersInput = {
    where: discussWhereUniqueInput
    update: XOR<discussUpdateWithoutUsersInput, discussUncheckedUpdateWithoutUsersInput>
    create: XOR<discussCreateWithoutUsersInput, discussUncheckedCreateWithoutUsersInput>
  }

  export type discussUpdateWithWhereUniqueWithoutUsersInput = {
    where: discussWhereUniqueInput
    data: XOR<discussUpdateWithoutUsersInput, discussUncheckedUpdateWithoutUsersInput>
  }

  export type discussUpdateManyWithWhereWithoutUsersInput = {
    where: discussScalarWhereInput
    data: XOR<discussUpdateManyMutationInput, discussUncheckedUpdateManyWithoutDiscussInput>
  }

  export type user_detailUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_detailWhereUniqueInput
    update: XOR<user_detailUpdateWithoutUsersInput, user_detailUncheckedUpdateWithoutUsersInput>
    create: XOR<user_detailCreateWithoutUsersInput, user_detailUncheckedCreateWithoutUsersInput>
  }

  export type user_detailUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_detailWhereUniqueInput
    data: XOR<user_detailUpdateWithoutUsersInput, user_detailUncheckedUpdateWithoutUsersInput>
  }

  export type user_detailUpdateManyWithWhereWithoutUsersInput = {
    where: user_detailScalarWhereInput
    data: XOR<user_detailUpdateManyMutationInput, user_detailUncheckedUpdateManyWithoutUser_detailInput>
  }

  export type user_detailScalarWhereInput = {
    AND?: Enumerable<user_detailScalarWhereInput>
    OR?: Enumerable<user_detailScalarWhereInput>
    NOT?: Enumerable<user_detailScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    ktp?: StringNullableFilter | string | null
    alamat?: StringNullableFilter | string | null
    jenis_kelamin?: StringNullableFilter | string | null
    usia?: IntNullableFilter | number | null
    ttl?: DateTimeNullableFilter | Date | string | null
  }

  export type booksCreateWithoutCategoryInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    users?: usersCreateNestedOneWithoutBooksInput
    borrowing?: borrowingCreateNestedManyWithoutBooksInput
    discuss?: discussCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutCategoryInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    id_user?: number | null
    descriptions?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutBooksInput
    discuss?: discussUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutCategoryInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutCategoryInput, booksUncheckedCreateWithoutCategoryInput>
  }

  export type booksUpsertWithWhereUniqueWithoutCategoryInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutCategoryInput, booksUncheckedUpdateWithoutCategoryInput>
    create: XOR<booksCreateWithoutCategoryInput, booksUncheckedCreateWithoutCategoryInput>
  }

  export type booksUpdateWithWhereUniqueWithoutCategoryInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutCategoryInput, booksUncheckedUpdateWithoutCategoryInput>
  }

  export type booksUpdateManyWithWhereWithoutCategoryInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutBooksInput>
  }

  export type booksCreateWithoutBorrowingInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    category?: categoryCreateNestedOneWithoutBooksInput
    users?: usersCreateNestedOneWithoutBooksInput
    discuss?: discussCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutBorrowingInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    id_category?: number | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    id_user?: number | null
    descriptions?: string | null
    discuss?: discussUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutBorrowingInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutBorrowingInput, booksUncheckedCreateWithoutBorrowingInput>
  }

  export type usersCreateWithoutBorrowingInput = {
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksCreateNestedManyWithoutUsersInput
    discuss?: discussCreateNestedManyWithoutUsersInput
    user_detail?: user_detailCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutBorrowingInput = {
    id?: number
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksUncheckedCreateNestedManyWithoutUsersInput
    discuss?: discussUncheckedCreateNestedManyWithoutUsersInput
    user_detail?: user_detailUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutBorrowingInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBorrowingInput, usersUncheckedCreateWithoutBorrowingInput>
  }

  export type booksUpsertWithoutBorrowingInput = {
    update: XOR<booksUpdateWithoutBorrowingInput, booksUncheckedUpdateWithoutBorrowingInput>
    create: XOR<booksCreateWithoutBorrowingInput, booksUncheckedCreateWithoutBorrowingInput>
  }

  export type booksUpdateWithoutBorrowingInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutBooksInput
    users?: usersUpdateOneWithoutBooksInput
    discuss?: discussUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    discuss?: discussUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type usersUpsertWithoutBorrowingInput = {
    update: XOR<usersUpdateWithoutBorrowingInput, usersUncheckedUpdateWithoutBorrowingInput>
    create: XOR<usersCreateWithoutBorrowingInput, usersUncheckedCreateWithoutBorrowingInput>
  }

  export type usersUpdateWithoutBorrowingInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutUsersInput
    discuss?: discussUpdateManyWithoutUsersInput
    user_detail?: user_detailUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutUsersInput
    discuss?: discussUncheckedUpdateManyWithoutUsersInput
    user_detail?: user_detailUncheckedUpdateManyWithoutUsersInput
  }

  export type booksCreateWithoutDiscussInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    category?: categoryCreateNestedOneWithoutBooksInput
    users?: usersCreateNestedOneWithoutBooksInput
    borrowing?: borrowingCreateNestedManyWithoutBooksInput
    rating?: ratingCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutDiscussInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    id_category?: number | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    id_user?: number | null
    descriptions?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutBooksInput
    rating?: ratingUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutDiscussInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutDiscussInput, booksUncheckedCreateWithoutDiscussInput>
  }

  export type usersCreateWithoutDiscussInput = {
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksCreateNestedManyWithoutUsersInput
    borrowing?: borrowingCreateNestedManyWithoutUsersInput
    user_detail?: user_detailCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutDiscussInput = {
    id?: number
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksUncheckedCreateNestedManyWithoutUsersInput
    borrowing?: borrowingUncheckedCreateNestedManyWithoutUsersInput
    user_detail?: user_detailUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutDiscussInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDiscussInput, usersUncheckedCreateWithoutDiscussInput>
  }

  export type booksUpsertWithoutDiscussInput = {
    update: XOR<booksUpdateWithoutDiscussInput, booksUncheckedUpdateWithoutDiscussInput>
    create: XOR<booksCreateWithoutDiscussInput, booksUncheckedCreateWithoutDiscussInput>
  }

  export type booksUpdateWithoutDiscussInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutBooksInput
    users?: usersUpdateOneWithoutBooksInput
    borrowing?: borrowingUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutDiscussInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type usersUpsertWithoutDiscussInput = {
    update: XOR<usersUpdateWithoutDiscussInput, usersUncheckedUpdateWithoutDiscussInput>
    create: XOR<usersCreateWithoutDiscussInput, usersUncheckedCreateWithoutDiscussInput>
  }

  export type usersUpdateWithoutDiscussInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutUsersInput
    borrowing?: borrowingUpdateManyWithoutUsersInput
    user_detail?: user_detailUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutDiscussInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutUsersInput
    borrowing?: borrowingUncheckedUpdateManyWithoutUsersInput
    user_detail?: user_detailUncheckedUpdateManyWithoutUsersInput
  }

  export type booksCreateWithoutRatingInput = {
    title?: string | null
    creator?: string | null
    publisher?: string | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    descriptions?: string | null
    category?: categoryCreateNestedOneWithoutBooksInput
    users?: usersCreateNestedOneWithoutBooksInput
    borrowing?: borrowingCreateNestedManyWithoutBooksInput
    discuss?: discussCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutRatingInput = {
    id?: number
    title?: string | null
    creator?: string | null
    publisher?: string | null
    id_category?: number | null
    isbn?: string | null
    pages?: string | null
    cover?: string | null
    id_user?: number | null
    descriptions?: string | null
    borrowing?: borrowingUncheckedCreateNestedManyWithoutBooksInput
    discuss?: discussUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutRatingInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
  }

  export type booksUpsertWithoutRatingInput = {
    update: XOR<booksUpdateWithoutRatingInput, booksUncheckedUpdateWithoutRatingInput>
    create: XOR<booksCreateWithoutRatingInput, booksUncheckedCreateWithoutRatingInput>
  }

  export type booksUpdateWithoutRatingInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutBooksInput
    users?: usersUpdateOneWithoutBooksInput
    borrowing?: borrowingUpdateManyWithoutBooksInput
    discuss?: discussUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutBooksInput
    discuss?: discussUncheckedUpdateManyWithoutBooksInput
  }

  export type usersCreateWithoutUser_detailInput = {
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksCreateNestedManyWithoutUsersInput
    borrowing?: borrowingCreateNestedManyWithoutUsersInput
    discuss?: discussCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_detailInput = {
    id?: number
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    books?: booksUncheckedCreateNestedManyWithoutUsersInput
    borrowing?: borrowingUncheckedCreateNestedManyWithoutUsersInput
    discuss?: discussUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_detailInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_detailInput, usersUncheckedCreateWithoutUser_detailInput>
  }

  export type usersUpsertWithoutUser_detailInput = {
    update: XOR<usersUpdateWithoutUser_detailInput, usersUncheckedUpdateWithoutUser_detailInput>
    create: XOR<usersCreateWithoutUser_detailInput, usersUncheckedCreateWithoutUser_detailInput>
  }

  export type usersUpdateWithoutUser_detailInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateManyWithoutUsersInput
    borrowing?: borrowingUpdateManyWithoutUsersInput
    discuss?: discussUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutUser_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUncheckedUpdateManyWithoutUsersInput
    borrowing?: borrowingUncheckedUpdateManyWithoutUsersInput
    discuss?: discussUncheckedUpdateManyWithoutUsersInput
  }

  export type borrowingUpdateWithoutBooksInput = {
    borrower_name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutBorrowingInput
  }

  export type borrowingUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    borrower_name?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type borrowingUncheckedUpdateManyWithoutBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    borrower_name?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussUpdateWithoutBooksInput = {
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutDiscussInput
  }

  export type discussUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussUncheckedUpdateManyWithoutDiscussInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ratingUpdateWithoutBooksInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ratingUncheckedUpdateManyWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type booksUpdateWithoutUsersInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    category?: categoryUpdateOneWithoutBooksInput
    borrowing?: borrowingUpdateManyWithoutBooksInput
    discuss?: discussUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutBooksInput
    discuss?: discussUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: NullableIntFieldUpdateOperationsInput | number | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type borrowingUpdateWithoutUsersInput = {
    borrower_name?: StringFieldUpdateOperationsInput | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutBorrowingInput
  }

  export type borrowingUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    borrower_name?: StringFieldUpdateOperationsInput | string
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type discussUpdateWithoutUsersInput = {
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
    books?: booksUpdateOneWithoutDiscussInput
  }

  export type discussUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    book_id?: NullableIntFieldUpdateOperationsInput | number | null
    discuss?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_detailUpdateWithoutUsersInput = {
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_detailUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_detailUncheckedUpdateManyWithoutUser_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    jenis_kelamin?: NullableStringFieldUpdateOperationsInput | string | null
    usia?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type booksUpdateWithoutCategoryInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutBooksInput
    borrowing?: borrowingUpdateManyWithoutBooksInput
    discuss?: discussUpdateManyWithoutBooksInput
    rating?: ratingUpdateManyWithoutBooksInput
  }

  export type booksUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    isbn?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    borrowing?: borrowingUncheckedUpdateManyWithoutBooksInput
    discuss?: discussUncheckedUpdateManyWithoutBooksInput
    rating?: ratingUncheckedUpdateManyWithoutBooksInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}